/** Declaration file generated by dts-gen */
declare module 'meyda' {
    export type FeatureExtractors = string | string[];
    export default class Meyda {
        static bufferSize: number;
        static sampleRate: number;
        static melBands: number;
        static numberOfMFCCCoefficients: number;
        static chromaBands: number;
        static callback: Function;
        static windowingFunction: string;

        static createMeydaAnalyzer(options: MeydaAnalyzerOptions): any;

        static extract(feature: FeatureExtractors, signal: number[]|Float32Array, previousSignal?: any): any;

        static windowing(signal: any, windowname: any): any;
    }

    export class MeydaAnalyzer {
        constructor(options: MeydaAnalyzerOptions);
        
        /**
         * Get a set of features from the current frame.
         * @param features Change the features that Meyda is extracting
         */
        get(features?: FeatureExtractors): void;
        /**
         * Set the channel of the audio node for Meyda to listen to
         * @param channel the index of the channel on the input audio node for Meyda to listen to.
         */
        setChannel(channel: number): void;
        /**
         * Set the Audio Node for Meyda to listen to.
         * @param source the audio node
         */
        setSource(source: AudioNode): void;
        /**
         * Start feature extraction The audio features will be passed to the callback function that was defined in the MeydaOptions that were passed to the factory when constructing the MeydaAnalyzer.
         * @param features Change the features that Meyda is extracting. Defaults to the features that were set upon construction in the options parameter.
         */
        start(features?: FeatureExtractors): void;
        /**
         * Stop feature extraction.
         */
        stop(): void;
    }
    export interface MeydaAnalyzerOptions {
        audioContext: AudioContext,
        source: AudioNode,
        bufferSize: number,
        hopSize?: number,
        inputs: number,
        sampleRate?: number,
        callback: Function,
        windowingFunction?: string,
        featureExtractors: FeatureExtractors,
        startImmediately?: boolean,
        numberOfMFCCCoefficients?: number,
    }
/*
    export const EXTRACTION_STARTED: boolean;

    export const audioContext: any;

    export const bufferSize: number;

    export const callback: any;

    export const chromaBands: number;

    export const melBands: number;

    export const numberOfMFCCCoefficients: number;

    export const sampleRate: number;

    export const spn: any;

    export const windowingFunction: string;


    export namespace featureExtractors {
        function amplitudeSpectrum(args: any): any;

        function buffer(args: any): any;

        function chroma(args: any): any;

        function complexSpectrum(args: any): any;

        function energy(...args: any[]): any;

        function loudness(args: any): any;

        function mfcc(args: any): any;

        function perceptualSharpness(...args: any[]): any;

        function perceptualSpread(...args: any[]): any;

        function powerSpectrum(...args: any[]): any;

        function rms(args: any): any;

        function spectralCentroid(...args: any[]): any;

        function spectralFlatness(...args: any[]): any;

        function spectralFlux(args: any): any;

        function spectralKurtosis(...args: any[]): any;

        function spectralRolloff(...args: any[]): any;

        function spectralSkewness(args: any): any;

        function spectralSlope(args: any): any;

        function spectralSpread(args: any): any;

        function zcr(...args: any[]): any;

    }
    */
}

